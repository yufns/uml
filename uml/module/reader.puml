@startuml

interface OnBookViewListener{
  void onSelectorVisible(boolean visible)//是否处于文字选择状态
  void onNotePopOpen(int type)//是否打开了笔记编辑框
  void onBookViewCenterClick()//是否点击了阅读器中心区域
  void onBookPageChanged()//翻页
}

interface OnChapterChangeListener{
  void onNextChapter(boolean isChapterTurn, int chapterIndex, boolean isEndIndex)
  void onPreChapter(boolean isChapterTurn, int chapterIndex, boolean isStartIndex)
}
class BookReaderActivity
class CatalogFragment
note top :目录
class BookReaderMenuPopWindow
note top:设置页面

class ReaderStatisticsHelper
note top : 阅读时长统计


BookReaderActivity *-- BookReaderView
BookReaderActivity *-- CatalogFragment
BookReaderActivity *-- BookReaderMenuPopWindow
BookReaderActivity *-- ReaderStatisticsHelper

OnBookViewListener <|.. BookReaderActivity
OnChapterChangeListener <|.. BookReaderActivity



abstract class BaseReaderView{
  {abstract} void drawPageContent(Canvas canvas, int pageIndex)
  {abstract} void onPageEndChanged(int currentPage)
  {abstract} void onPageStartChange(int requestPage)
  {abstract} void onPageRequest(int currentPage, int requestPage)
}


abstract class PageAnimController{
  {abstract} void dispatchTouchEvent(MotionEvent event, PageCarver pageCarver)
  {abstract} boolean dispatchDrawPage(Canvas canvas, PageCarver pageCarver)
  {abstract} void startAnim(int fromIndex, int toIndex, boolean isNext, PageCarver pageCarver)//翻页动画开始
  {abstract} void stopAnim(PageCarver pageCarver)
}
abstract class AbsHorGestureAnimController{
  - Scroller mScroller
}
class AutoAnimController
class NoAnimController
class PageTurningAnimController
note top : 实现了翻页效果

class HorTranslationAnimController

PageAnimController <|-- AbsHorGestureAnimController
PageAnimController <|-- NoAnimController
PageAnimController <|-- AutoAnimController
AbsHorGestureAnimController <|-- PageTurningAnimController
AbsHorGestureAnimController <|-- HorTranslationAnimController



class PageSnapshot
note top:绘制的区域

class PageSnapshotCache
interface PageAnimController.PageCarver{
  void drawPage(Canvas canvas, int index);
  Integer requestPrePage();
  Integer requestNextPage();
  void requestInvalidate();
  int getCurrentPageIndex();
  int getContentWidth();
  int getContentHeight();
  int getScreenWidth();
  int getScreenHeight();
  int getPageBackgroundColor();
  void onStartAnim(boolean isCancel);
  void onStopAnim(boolean isCancel);
}


class BookReaderView
note top:阅读部分内容

class BookSettingParams
note top : 配置中心

abstract class ResElement{
  + {abstract} void update(ReaderSettingParams params);
  + {abstract} int getHeight();
  + {abstract} void draw(Canvas canvas);
  + {abstract} void destroy();

  # int getTextHeight(Paint paint)
  # int getTextBaseLine(Paint paint)
}
class BookPageElement{
  - List<BookPageData> pages//需要绘制的数据
}
class BookHeaderElement
class BookFooterElement
class BookLineElement
class BookImageElement{
  - LruCache<String, Bitmap> bitmapLruCache//绘制缓存区域
}
class BookTextSelectorElement

View <|-- BaseReaderView
BaseReaderView <|-- BookReaderView
ResElement <|-- BookPageElement
ResElement <|-- BookHeaderElement
ResElement <|-- BookFooterElement
ResElement <|-- BookLineElement
ResElement <|-- BookImageElement
ResElement <|-- BookTextSelectorElement


BookReaderView *-- BookSettingParams
BookReaderView *-- BookPageElement
BookReaderView *-- BookTextSelectorElement
BaseReaderView *-- PageAnimController
BaseReaderView *-- PageSnapshotCache
BookPageElement *-- BookHeaderElement
BookPageElement *-- BookFooterElement
BookPageElement *-- BookLineElement
BookPageElement *-- BookReaderView
BookPageElement *-- BookImageElement

PageSnapshotCache o-- PageSnapshot



PageAnimController.PageCarver <|.. BaseReaderView






@enduml