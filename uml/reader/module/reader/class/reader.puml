@startuml
interface OnBookViewListener{
  void onSelectorVisible(boolean visible)//是否处于文字选择状态
  void onNotePopOpen(int type)//是否打开了笔记编辑框
  void onBookViewCenterClick()//点击了阅读器中心区域,打开PopWindow
  void onBookPageChanged()//翻页
}

interface OnChapterChangeListener{
  void onNextChapter(...)
  void onPreChapter(...)
}
interface  Presenter{
  void getBookDetail(long bookId)
  void getChapterContent(...)//从网络获取文章信息
}

interface View{
  void onChapterContent(...);//显示章节内容
}

class BookReaderActivity
class CatalogFragment
class BookReaderMenuPopWindow
class ReaderStatisticsHelper

BookReaderActivity *-- BookReaderView
BookReaderActivity *-- CatalogFragment
BookReaderActivity *-- BookReaderMenuPopWindow
BookReaderActivity *-- ReaderStatisticsHelper
BookReaderActivity *-- Presenter

View <|.. BookReaderActivity
OnBookViewListener <|.. BookReaderActivity
OnChapterChangeListener <|.. BookReaderActivity

interface PageCarver{
  void drawPage(Canvas canvas, int index)
  Integer requestPrePage();
  Integer requestNextPage();
  void requestInvalidate();
  int getCurrentPageIndex();
  int getContentWidth();
  int getContentHeight();
  int getScreenWidth();
  int getScreenHeight();
  int getPageBackgroundColor();
  void onStartAnim(boolean isCancel);
  void onStopAnim(boolean isCancel);
}

class PageSnapshot
class PageSnapshotCache
note top:页面快照缓存
class BookReaderView{
  -- Filed --
  OnChapterChangeListener
  -- Override --
  + boolean dispatchTouchEvent(MotionEvent event)
  + boolean onTouchEvent(MotionEvent event)
}
class BookSettingParams
note top:阅读器配置参数
abstract class BaseReaderView{
  -- Override --
  # void onDraw(Canvss canvas)
  + boolean onTouchEvent(MotionEvent event)
  -- abstract --
  {abstract} void drawPageContent(Canvas canvas, int pageIndex)//通过Elements的实现类,实现内容的绘制
  {abstract} void onPageEndChanged(int currentPage)//翻页结束时的回调
  {abstract} void onPageStartChange(int requestPage)//翻页开始时的回调
  {abstract} void onPageRequest(int currentPage, int requestPage)//当Touch事件为Move时,请求翻页时回调
}

BaseReaderView <|-- BookReaderView

BookReaderView *-- BookSettingParams
BookReaderView *-- ResElement
BookReaderView *-- PageAnimController
BookReaderView *-- PageSnapshotCache

PageSnapshotCache o-- PageSnapshot
PageCarver <|.. BaseReaderView

abstract class ResElement{
  -- abstract --
  + {abstract} void update(ReaderSettingParams params);
  + {abstract} int getHeight();
  + {abstract} void draw(Canvas canvas);//绘制内容
  + {abstract} void destroy();
  -- protected --
  # int getTextHeight(Paint paint)
  # int getTextBaseLine(Paint paint)
}
note bottom:多个element共同负责内容的绘制(头,尾,正文等)


abstract class PageAnimController{
  -- abstract --
  {abstract} void dispatchTouchEvent(MotionEvent event, PageCarver pageCarver)//处理翻页效果
  {abstract} boolean dispatchDrawPage(Canvas canvas, PageCarver pageCarver)//在onDraw调用
  {abstract} void startAnim(int fromIndex, int toIndex, boolean isNext, PageCarver pageCarver)
  {abstract} void stopAnim(PageCarver pageCarver)
  {abstract} boolean isAnimStop();
}
note top:页面动效控制器

abstract class AbsHorGestureAnimController{
  - Scroller mScroller
  -- abstract --
  {abstract} void onAnimStart(boolean isCancelAnim);
  {abstract} void onAnimEnd(boolean isCancelAnim);
  {abstract} void onRequestPage(boolean isRequestNext, int fromIndex, int toIndex, float x, float y);//翻页时调用
  {abstract} void onDrawAnim(Canvas canvas, boolean isCancelAnim, boolean isNext, PageCarver pageCarver);
  {abstract} boolean isAnimStop();
  -- Oberride --
  + void dispatchTouchEvent(MotionEvent event, PageCarver pageCarver)
  + boolean dispatchDrawPage(Canvas canvas, PageCarver pageCarver)
  + void startAnim(int fromIndex, int toIndex, boolean isNext, PageCarver pageCarver)
  + boolean isAnimStop()
  + void stopAnim(PageCarver pageCarver)
}
class PageTurningAnimController
class HorTranslationAnimController

PageAnimController <|-- AbsHorGestureAnimController

AbsHorGestureAnimController <|-- PageTurningAnimController
AbsHorGestureAnimController <|-- HorTranslationAnimController
@enduml